pipeline {
  agent any
  stages {
    stage("verify tooling") {
      steps {
        sh '''
          docker version
          docker info
          docker compose version 
          curl --version
          '''
      }
    }
    stage('Start container') {
      steps {
        sh 'docker compose -f docker-compose.stage.yml up -d --no-color --wait'
        sh 'docker compose -f docker-compose.stage.yml ps'
      }
    }
    stage('Wait for container') {
      steps {
        sh 'sleep 30'
      }
    }
    stage('Run tests against the container') {
      steps {
        script {
          def containerIds = sh(returnStdout: true, script: 'docker compose -f docker-compose.stage.yml ps -q').trim().split('\n')
          def desiredContainerId = containerIds[0] 
          sh "docker exec '${desiredContainerId}' curl http://localhost:9090/api/alunos"
        }
      }
    }
  }
  post {
    success {
      blocks = [
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": "*Deployment to stage succeeded!*"
          }
        },
        {
          "type": "actions",
          "elements": [
            {
              "type": "button",
              "text": {
                "type": "plain_text",
                "text": "Deploy to production",
                "emoji": true
              }
            }
          ]
        }
      ]
      
      slackSend(channel: "pipe-homol", blocks: blocks)
		}
    failure {
      slackSend(channel: "pipe-homol", message: "Deployment to stage failed!")
    }
  }
}
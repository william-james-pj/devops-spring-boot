pipeline {
  agent any
  stages {
    stage("verify tooling") {
      steps {
        sh '''
          docker version
          docker info
          docker compose version 
          curl --version
          '''
      }
    }
    stage('Start container') {
      steps {
        sh 'docker compose -f docker-compose.stage.yml up -d --no-color --wait'
        sh 'docker compose -f docker-compose.stage.yml ps'
      }
    }
    stage('Wait for container') {
      steps {
        sh 'sleep 30'
      }
    }
    stage('Run tests against the container') {
      steps {
        script {
          def containerIds = sh(returnStdout: true, script: 'docker compose -f docker-compose.stage.yml ps -q').trim().split('\n')
          def desiredContainerId = containerIds[0] 
          sh "docker exec '${desiredContainerId}' curl http://localhost:9090/api/alunos"
        }
      }
    }
  }
  post {
    always {
      sh 'docker compose down --remove-orphans'
      sh 'docker compose ps'
    }
    success {
      slackSend(channel: "#pipe-homol", message: "Temos o prazer de informar que a pipeline de homologacao foi concluida com sucesso! Todos os testes foram bem-sucedidos, indicando que o codigo esta pronto para a proxima fase.")
    }
    failure {
      slackSend(channel: "#pipe-homol", message: "Lamentamos informar que a pipeline de homologacao falhou durante a execucao. Foram identificados problemas que precisam ser corrigidos antes de prosseguirmos.")
    }
  }
}